
        Version 2  Design  Plan

1. The Big Picture

   1.1 Server:
       a.  mod_freedom will serve onions
       b.  mod_freedom will do crypto at request time, both as request recognition, and
           onion delivery.   
       c.  mod_freedom will have an update daemon that pulls/handles new onions (perhaps 
           using a tor hidden service)

   1.2 Client:
       a.  the client will process onions, not hops


2. The mod_freedom request protocol

client   -------->  (symmetric key | wriggle-room) encrypted with server's public key  ------> server

server   ------->   ((secret) signed by defiance public key) encrypted by symmetric key

Note that this means the client needs to be configured with public keys for every server 
it may want to contact, or it eventually uses https and makes use of the server's 
https certificate.



3. Onions

The client receives an payload encrypted with the sent symetric key. This decrypts to
the first onion in the chain.

    3a. A Signed Onion:   { type:signed,  puzzle:signature,           data:payload  }  
    3b. A Captcha Onion:  { type:captcha, puzzle:image-png,           data:payload  }
    3c. A PoW Onion:      { type:pow,     puzzle:proof-of-work,       data:payload  }
    3e. A Riddle Onion:   { type:riddle,  puzzle:statement-of-riddle, data:payload  }
    3d. A Nep Onion:      { type:nep,     puzzle:NULL,                data:nep      }


image looks variable sized, nep is parsable, but of variable size, safer to have a header
followd by data two size_t slots as well.

char magic[6];
uint16_t onion_type;
uint32_t puzzle_size;
uint32_t data_size;         
uchar puzzle;
uchar data;


Let's build and unwrap some onions as a first step!

We build an onion at an undisclosed location (i.e neither at the server nor at the client),
we unwrap the onion at the client,  we encrypt the onion with a symmetric key on the server.


Lets start with a (pretend) nep:

{ "initial": "128.18.9.71", "redirect": "128.18.9.71", "wait": 123, "window": 456, "passphrase": "abracadabra" }


so to wrap an onion we need the onion, and whatever we need to wrap it:

base onion just needs a nep

pow onion needs onion and a password; although the password could be autogenerated too.

captcha onion needs the image, its plain text counterpart, and the onion its wraps.

signed onion needs the key of the signer, and the onion.



void* make_base_onion(char *nep);

void* make_pow_onion(char* password, void* onion);

void* make_captcha_onion(char* text, char* imagepath, void* onion);

void* make_signed_onion(char* sigpath, void* onion);

int encrypt_onion(char* symmetric, void* onion, size_t data_len, size_t data);



void* unwrap_onion(void *);
